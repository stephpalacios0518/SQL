# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the avg danceability by artist and track.
SELECT artist_name, track_name, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name,track_name;

#Continued to determine the artist released the longest song?

SELECT artist_name, track_name, MAX(duration_ms)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY MAX(duration_ms) DESC
LIMIT 1;

#Then I determined who the Top 10 artists are by popularity

SELECT artist_name,track_name, MAX(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY MAX(popularity) DESC
LIMIT 10;

#Lastly rated song popularity based on viral, widely-loved, niche, and hidden gem

SELECT track_name,artist_name, 
CASE WHEN popularity>90 THEN 'viral'
WHEN popularity>85 THEN 'widely-loved'
WHEN popularity>75 THEN 'niche'
ELSE "hidden_gem"
END AS popularity_rating
FROM BIT_DB.Spotifydata; 
